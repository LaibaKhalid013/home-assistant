# serializer version: 1
# name: test_sensors[sensor.test_user_class-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'warrior',
        'healer',
        'wizard',
        'rogue',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_class',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Class',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.CLASS: 'class'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_class',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_user_class-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'test-user Class',
      'options': list([
        'warrior',
        'healer',
        'wizard',
        'rogue',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_class',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'wizard',
  })
# ---
# name: test_sensors[sensor.test_user_dailies-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_dailies',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Dailies',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.DAILIES: 'dailys'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_dailys',
    'unit_of_measurement': 'tasks',
  })
# ---
# name: test_sensors[sensor.test_user_dailies-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      '55555555-5555-5555-5555-555555555555': dict({
        'created_at': '2024-07-07T17:51:53.268Z',
        'every_x': 1,
        'frequency': 'weekly',
        'group': dict({
          'assignedUsers': list([
          ]),
          'completedBy': dict({
          }),
        }),
        'is_due': True,
        'next_due': list([
          'Sat Jul 13 2024 00:00:00 GMT+0200',
          'Mon Jul 15 2024 00:00:00 GMT+0200',
          'Tue Jul 16 2024 00:00:00 GMT+0200',
          'Wed Jul 17 2024 00:00:00 GMT+0200',
          'Thu Jul 18 2024 00:00:00 GMT+0200',
          'Fri Jul 19 2024 00:00:00 GMT+0200',
        ]),
        'notes': 'Klicke um Ã„nderungen zu machen!',
        'priority': 1,
        'repeat': dict({
          'f': True,
          'm': True,
          's': True,
          'su': True,
          't': True,
          'th': True,
          'w': True,
        }),
        'start_date': '2024-07-06T22:00:00.000Z',
        'streak': 2,
        'text': 'Zahnseide benutzen',
        'type': 'daily',
        'value': 1.0499115128458676,
        'yester_daily': True,
      }),
      '66666666-6666-6666-6666-666666666666': dict({
        'completed': True,
        'created_at': '2024-07-07T17:51:53.266Z',
        'every_x': 1,
        'frequency': 'weekly',
        'group': dict({
          'assignedUsers': list([
          ]),
          'completedBy': dict({
          }),
        }),
        'is_due': True,
        'next_due': list([
          '2024-07-12T22:00:00.000Z',
          '2024-07-14T22:00:00.000Z',
          '2024-07-15T22:00:00.000Z',
          '2024-07-16T22:00:00.000Z',
          '2024-07-17T22:00:00.000Z',
          '2024-07-18T22:00:00.000Z',
        ]),
        'notes': 'Klicke um Deinen Terminplan festzulegen!',
        'priority': 1,
        'repeat': dict({
          'f': True,
          'm': True,
          's': True,
          'su': True,
          't': True,
          'th': True,
          'w': True,
        }),
        'start_date': '2024-07-06T22:00:00.000Z',
        'streak': 3,
        'text': '5 Minuten ruhig durchatmen',
        'type': 'daily',
        'value': 2.023365658844519,
        'yester_daily': True,
      }),
      'friendly_name': 'test-user Dailies',
      'unit_of_measurement': 'tasks',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_dailies',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.test_user_display_name-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_display_name',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Display name',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.DISPLAY_NAME: 'display_name'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_display_name',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_user_display_name-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'test-user Display name',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_display_name',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'test-user',
  })
# ---
# name: test_sensors[sensor.test_user_experience-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_experience',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Experience',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.EXPERIENCE: 'experience'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_experience',
    'unit_of_measurement': 'XP',
  })
# ---
# name: test_sensors[sensor.test_user_experience-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'test-user Experience',
      'unit_of_measurement': 'XP',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_experience',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '737',
  })
# ---
# name: test_sensors[sensor.test_user_gold-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_gold',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Gold',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.GOLD: 'gold'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_gold',
    'unit_of_measurement': 'GP',
  })
# ---
# name: test_sensors[sensor.test_user_gold-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'test-user Gold',
      'unit_of_measurement': 'GP',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_gold',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '137.625872146098',
  })
# ---
# name: test_sensors[sensor.test_user_habits-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_habits',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Habits',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.HABITS: 'habits'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_habits',
    'unit_of_measurement': 'tasks',
  })
# ---
# name: test_sensors[sensor.test_user_habits-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      '11111111-1111-1111-1111-111111111111': dict({
        'counter_up': 1,
        'created_at': '2024-07-07T17:51:53.268Z',
        'frequency': 'daily',
        'group': dict({
          'assignedUsers': list([
          ]),
          'completedBy': dict({
          }),
        }),
        'priority': 1,
        'text': 'Gesundes Essen/Junkfood',
        'type': 'habit',
      }),
      '22222222-2222-2222-2222-222222222222': dict({
        'created_at': '2024-07-07T17:51:53.266Z',
        'frequency': 'daily',
        'group': dict({
          'assignedUsers': list([
          ]),
          'completedBy': dict({
          }),
        }),
        'priority': 1,
        'text': 'Eine kurze Pause machen',
        'type': 'habit',
      }),
      '33333333-3333-3333-3333-333333333333': dict({
        'created_at': '2024-07-07T17:51:53.265Z',
        'frequency': 'daily',
        'group': dict({
          'assignedUsers': list([
          ]),
          'completedBy': dict({
          }),
        }),
        'notes': 'Oder lÃ¶sche es Ã¼ber die Bearbeitungs-Ansicht',
        'priority': 1,
        'text': 'Klicke hier um dies als schlechte Gewohnheit zu markieren, die Du gerne loswerden mÃ¶chtest',
        'type': 'habit',
      }),
      '44444444-4444-4444-4444-444444444444': dict({
        'created_at': '2024-07-07T17:51:53.264Z',
        'frequency': 'daily',
        'group': dict({
          'assignedUsers': list([
          ]),
          'completedBy': dict({
          }),
        }),
        'notes': 'Eine Gewohnheit, eine Tagesaufgabe oder ein To-Do',
        'priority': 1,
        'text': 'FÃ¼ge eine Aufgabe zu Habitica hinzu',
        'type': 'habit',
      }),
      'friendly_name': 'test-user Habits',
      'unit_of_measurement': 'tasks',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_habits',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '4',
  })
# ---
# name: test_sensors[sensor.test_user_health-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_health',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Health',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.HEALTH: 'health'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_health',
    'unit_of_measurement': 'HP',
  })
# ---
# name: test_sensors[sensor.test_user_health-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'test-user Health',
      'unit_of_measurement': 'HP',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_health',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_user_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Level',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.LEVEL: 'level'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_level',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_user_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'test-user Level',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '38',
  })
# ---
# name: test_sensors[sensor.test_user_mana-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_mana',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Mana',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.MANA: 'mana'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_mana',
    'unit_of_measurement': 'MP',
  })
# ---
# name: test_sensors[sensor.test_user_mana-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'test-user Mana',
      'unit_of_measurement': 'MP',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_mana',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '50.9',
  })
# ---
# name: test_sensors[sensor.test_user_max_health-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_max_health',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Max. health',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.HEALTH_MAX: 'health_max'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_health_max',
    'unit_of_measurement': 'HP',
  })
# ---
# name: test_sensors[sensor.test_user_max_health-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'test-user Max. health',
      'unit_of_measurement': 'HP',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_max_health',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '50',
  })
# ---
# name: test_sensors[sensor.test_user_max_mana-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_max_mana',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Max. mana',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.MANA_MAX: 'mana_max'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_mana_max',
    'unit_of_measurement': 'MP',
  })
# ---
# name: test_sensors[sensor.test_user_max_mana-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'test-user Max. mana',
      'unit_of_measurement': 'MP',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_max_mana',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '166',
  })
# ---
# name: test_sensors[sensor.test_user_next_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_next_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Next level',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.EXPERIENCE_MAX: 'experience_max'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_experience_max',
    'unit_of_measurement': 'XP',
  })
# ---
# name: test_sensors[sensor.test_user_next_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'test-user Next level',
      'unit_of_measurement': 'XP',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_next_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '880',
  })
# ---
# name: test_sensors[sensor.test_user_rewards-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_rewards',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Rewards',
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.REWARDS: 'rewards'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_rewards',
    'unit_of_measurement': 'tasks',
  })
# ---
# name: test_sensors[sensor.test_user_rewards-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      '99999999-9999-9999-9999-999999999999': dict({
        'created_at': '2024-07-07T17:51:53.266Z',
        'group': dict({
          'assignedUsers': list([
          ]),
          'completedBy': dict({
          }),
        }),
        'notes': 'Schaue fern, spiele ein Spiel, gÃ¶nne Dir einen Leckerbissen, es liegt ganz bei Dir!',
        'priority': 1,
        'text': 'Belohne Dich selbst',
        'type': 'reward',
        'value': 10,
      }),
      'friendly_name': 'test-user Rewards',
      'unit_of_measurement': 'tasks',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_rewards',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1',
  })
# ---
# name: test_sensors[sensor.test_user_to_do_s-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_user_to_do_s',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': "To-Do's",
    'platform': 'habitica',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': <HabitipySensorEntity.TODOS: 'todos'>,
    'unique_id': '00000000-0000-0000-0000-000000000000_todos',
    'unit_of_measurement': 'tasks',
  })
# ---
# name: test_sensors[sensor.test_user_to_do_s-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      '77777777-7777-7777-7777-777777777777': dict({
        'created_at': '2024-07-07T17:51:53.265Z',
        'group': dict({
          'assignedUsers': list([
          ]),
          'completedBy': dict({
          }),
        }),
        'notes': 'Du kannst dieses To-Do entweder abhaken, es bearbeiten oder lÃ¶schen',
        'priority': 1,
        'text': 'Habitica beitreten (Hake mich ab!)',
        'type': 'todo',
        'value': -0.9999899605038167,
      }),
      '88888888-8888-8888-8888-888888888888': dict({
        'created_at': '2024-07-07T17:51:53.269Z',
        'group': dict({
          'assignedUsers': list([
          ]),
          'completedBy': dict({
          }),
        }),
        'notes': 'Klicke um Checklisten hinzuzufÃ¼gen',
        'priority': 1,
        'text': 'Termin fÃ¼r einen Check-up setzen >> Denke Ã¼ber eine gesunde VerÃ¤nderung nach',
        'type': 'todo',
        'value': -5.273864715541224,
      }),
      'friendly_name': "test-user To-Do's",
      'unit_of_measurement': 'tasks',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_user_to_do_s',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
