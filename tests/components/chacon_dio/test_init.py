"""Test the Dio Chacon Cover init."""

from collections.abc import Callable
from unittest.mock import AsyncMock

from homeassistant.components.chacon_dio import SERVICE_RELOAD_STATE
from homeassistant.components.chacon_dio.const import DOMAIN
from homeassistant.components.cover import ATTR_CURRENT_POSITION, STATE_OPEN
from homeassistant.config_entries import ConfigEntryState
from homeassistant.const import EVENT_HOMEASSISTANT_STOP
from homeassistant.core import HomeAssistant
from homeassistant.helpers import entity_registry as er

from . import setup_integration
from .test_cover import COVER_ENTITY_ID

from tests.common import MockConfigEntry


async def test_cover_unload_entry(
    hass: HomeAssistant,
    mock_dio_chacon_client: AsyncMock,
    mock_config_entry: MockConfigEntry,
) -> None:
    """Test the creation and values of the Dio Chacon covers."""

    await setup_integration(hass, mock_config_entry)

    assert mock_config_entry.state is ConfigEntryState.LOADED

    await hass.config_entries.async_unload(mock_config_entry.entry_id)
    await hass.async_block_till_done()

    assert mock_config_entry.state is ConfigEntryState.NOT_LOADED
    mock_dio_chacon_client.disconnect.assert_called()


async def test_cover_shutdown_event(
    hass: HomeAssistant,
    mock_dio_chacon_client: AsyncMock,
    mock_config_entry: MockConfigEntry,
) -> None:
    """Test the creation and values of the Dio Chacon covers."""

    await setup_integration(hass, mock_config_entry)

    hass.bus.async_fire(EVENT_HOMEASSISTANT_STOP)
    await hass.async_block_till_done()
    mock_dio_chacon_client.disconnect.assert_called()


async def test_reload_service(
    hass: HomeAssistant,
    mock_dio_chacon_client: AsyncMock,
    mock_config_entry: MockConfigEntry,
    entity_registry: er.EntityRegistry,
) -> None:
    """Test the reload service for Chacon Dio covers."""

    await setup_integration(hass, mock_config_entry)

    mock_dio_chacon_client.get_status_details.return_value = {
        "id": "L4HActuator_idmock1",
        "connected": True,
        "openlevel": 51,
        "movement": "stop",
    }

    # Server side callback tests
    # We find the callback method on the mock client
    callback_device_state_function: Callable = (
        mock_dio_chacon_client.set_callback_device_state_by_device.call_args[0][1]
    )

    # Define a method to simply call it
    async def _callback_device_state_function(open_level: int, movement: str) -> None:
        callback_device_state_function(
            {
                "id": "L4HActuator_idmock1",
                "connected": True,
                "openlevel": open_level,
                "movement": movement,
            }
        )
        await hass.async_block_till_done()

    await hass.services.async_call(DOMAIN, SERVICE_RELOAD_STATE, blocking=True)
    await hass.async_block_till_done()

    # Simulates the callback generated by the call to the SERVICE_RELOAD_STATE
    await _callback_device_state_function(51, "stop")
    state = hass.states.get(COVER_ENTITY_ID)
    assert state
    assert state.attributes.get(ATTR_CURRENT_POSITION) == 51
    assert state.state == STATE_OPEN
