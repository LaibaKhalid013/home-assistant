{
  "title": "Generic thermostat",
  "config": {
    "step": {
      "user": {
        "title": "Add generic hygrostat sensor",
        "description": "Create a entity that control the humidity via a switch and sensor.",
        "data": {
          "heater": "Heater or AC",
          "target_sensor": "Temperature sensor",
          "ac_mode": "A/C mode active",
          "max_temp": "Maximum set point",
          "min_temp": "Minumum set point",
          "name": "[%key:common::config_flow::data::name%]",
          "cold_tolerance": "Cold tolerance",
          "hot_tolerance": "Hot tolerance",
          "target_temp": "Initial target temperature",
          "keep_alive": "Keep alive",
          "initial_hvac_mode": "Initial mode",
          "precision": "Precision",
          "target_temp_step": "Temperature step"
        },
        "data_description": {
          "heater": "Switch entity used to cool or heat depending on A/C mode.",
          "target_sensor": "Temperature sensor that reflect the current temperature.",
          "ac_mode": "Set the switch specified to be treated as a cooling device instead of a heating device.",
          "min_temp": "Minimum set point available.",
          "max_temp": "Maximum set point available.",
          "cold_tolerance": "Minimum amount of difference between the temperature read by the temperature sensor the target temperature that must change prior to being switched on. For example, if the target temperature is 25 and the tolerance is 0.5 the heater will start when the sensor equals or goes below 24.5.",
          "hot_tolerance": "Minimum amount of difference between the temperature read by the temperature sensor the target temperature that must change prior to being switched off. For example, if the target temperature is 25 and the tolerance is 0.5 the heater will stop when the sensor equals or goes above 25.5.",
          "target_temp": "Initial target temperature to use if none is known.",
          "keep_alive": "If set, the switch specified will be triggered every time the interval elapses. Use with devices that shut off if they don't receive a signal from their remote for a while. Use also with switches that might lose state.",
          "initial_hvac_mode": "Set the initial HVAC mode. Valid values are off, heat or cool. Value has to be double quoted. If this parameter is not set, it is preferable to set a keep_alive value. This is helpful to align any discrepancies between generic_thermostat and heater state.",
          "precision": "The desired precision for this device. Can be used to match your actual thermostat's precision. Supported values are 0.1, 0.5 and 1.0. This value is also used as the step size for setting the target temperature.",
          "target_temp_step": "The desired step size for setting the target temperature. Supported values are 0.1, 0.5 and 1.0."
        }
      }
    }
  },
  "options": {
    "step": {
      "init": {
        "data": {
          "heater": "[%key:component::generic_thermostat::config::step::user::data::heater%]",
          "target_sensor": "[%key:component::generic_thermostat::config::step::user::data::target_sensor%]",
          "ac_mode": "[%key:component::generic_thermostat::config::step::user::data::ac_mode%]",
          "max_temp": "[%key:component::generic_thermostat::config::step::user::data::max_temp%]",
          "min_temp": "[%key:component::generic_thermostat::config::step::user::data::min_temp%]",
          "cold_tolerance": "[%key:component::generic_thermostat::config::step::user::data::cold_tolerance%]",
          "hot_tolerance": "[%key:component::generic_thermostat::config::step::user::data::hot_tolerance%]",
          "target_temp": "[%key:component::generic_thermostat::config::step::user::data::target_temp%]",
          "keep_alive": "[%key:component::generic_thermostat::config::step::user::data::keep_alive%]",
          "initial_hvac_mode": "[%key:component::generic_thermostat::config::step::user::data::initial_hvac_mode%]",
          "precision": "[%key:component::generic_thermostat::config::step::user::data::precision%]",
          "target_temp_step": "[%key:component::generic_thermostat::config::step::user::data::target_temp_step%]"
        },
        "data_description": {
          "heater": "[%key:component::generic_thermostat::config::step::user::data_description::heater%]",
          "target_sensor": "[%key:component::generic_thermostat::config::step::user::data_description::target_sensor%]",
          "min_temp": "[%key:component::generic_thermostat::config::step::user::data_description::min_temp%]",
          "max_temp": "[%key:component::generic_thermostat::config::step::user::data_description::max_temp%]",
          "cold_tolerance": "[%key:component::generic_thermostat::config::step::user::data_description::cold_tolerance%]",
          "hot_tolerance": "[%key:component::generic_thermostat::config::step::user::data_description::hot_tolerance%]",
          "target_temp": "[%key:component::generic_thermostat::config::step::user::data_description::target_temp%]",
          "keep_alive": "[%key:component::generic_thermostat::config::step::user::data_description::keep_alive%]",
          "initial_hvac_mode": "[%key:component::generic_thermostat::config::step::user::data_description::initial_hvac_mode%]",
          "precision": "[%key:component::generic_thermostat::config::step::user::data_description::precision%]",
          "target_temp_step": "[%key:component::generic_thermostat::config::step::user::data_description::target_temp_step%]"
        }
      }
    }
  },
  "selector": {
    "initial_hvac_mode": {
      "options": {
        "cool": "[%key:component::climate::entity_component::_::state::cool%]",
        "heat": "[%key:component::climate::entity_component::_::state::heat%]",
        "off": "[%key:common::state::off%]"
      }
    }
  },
  "services": {
    "reload": {
      "name": "[%key:common::action::reload%]",
      "description": "Reloads generic thermostats from the YAML-configuration."
    }
  }
}
