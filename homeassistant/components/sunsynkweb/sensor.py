"""Sensors for the sunsynk web api."""

import decimal
import logging

from homeassistant.components.sensor import (
    SensorDeviceClass,
    SensorEntity,
    SensorEntityDescription,
    SensorStateClass,
)
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import PERCENTAGE, UnitOfEnergy, UnitOfPower
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.update_coordinator import CoordinatorEntity

from .coordinator import PlantUpdateCoordinator

_LOGGER = logging.getLogger(__name__)


class SunSynkApiSensor(CoordinatorEntity, SensorEntity):
    """Parent class for sunsynk api exposing sensors.

    The sensors expose the sum of the power across all inverters
    for plants that have more than one inverter.
    State of charge is normally shared between inverters, so this will take
    the maximum of the state of charge.
    """

    def __init__(self, agg_func, coordinator, description) -> None:
        """Initialise the common elements for sunsynk web api sensors."""
        CoordinatorEntity.__init__(self, coordinator, context=coordinator)
        self.coordinator: PlantUpdateCoordinator = coordinator
        self.entity_id = f"sensor.sunsynk_{description.key}_{sum(p.id for p in coordinator.cache.plants)}"

        self.name = description.name
        self.entity_description = description
        self.agg_func = agg_func

    @callback
    def _handle_coordinator_update(self) -> None:
        """Handle updated data from the coordinator."""
        if self.coordinator.cache is not None:
            self.native_value = self.agg_func(
                decimal.Decimal(getattr(i, self.entity_description.key))
                for i in self.coordinator.cache.plants
            )
        else:
            _LOGGER.debug("Not updating sensor as coordinator cache is empty. ")
        self.async_write_ha_state()


SENSOR_DESCRIPTIONS = [
    (
        sum,
        SensorEntityDescription(  # ""A gauge for battery power."""
            device_class=SensorDeviceClass.POWER,
            native_unit_of_measurement=UnitOfPower.WATT,
            key="battery_power",
            name="Solar supply battery power (instantaneous)",
        ),
    ),
    (
        sum,
        SensorEntityDescription(  # A gauge for the load on all inverters."
            device_class=SensorDeviceClass.POWER,
            native_unit_of_measurement=UnitOfPower.WATT,
            key="load_power",
            name="Total inverter load instantaneous",
        ),
    ),
    (
        sum,
        SensorEntityDescription(  # ""A gauge for the load to or from the grid."""
            device_class=SensorDeviceClass.POWER,
            native_unit_of_measurement=UnitOfPower.WATT,
            key="grid_power",
            name="Load to or from the grid instantaneous",
        ),
    ),
    (
        sum,
        SensorEntityDescription(  # ""A gauge for the power from generator (typically solar panels)."""
            device_class=SensorDeviceClass.POWER,
            native_unit_of_measurement=UnitOfPower.WATT,
            key="pv_power",
            name="Power generated by solar panels instantaneous",
        ),
    ),
    (
        max,
        SensorEntityDescription(  # ""A gauge to track batter charge."""
            device_class=SensorDeviceClass.BATTERY,
            native_unit_of_measurement=PERCENTAGE,
            key="state_of_charge",
            name="Solar battery charge",
        ),
    ),
    (
        sum,
        SensorEntityDescription(  # ""Accumulated energy generated (typically by solar panels)."""
            device_class=SensorDeviceClass.ENERGY,
            state_class=SensorStateClass.TOTAL_INCREASING,
            native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
            key="acc_pv",
            name="Total PV generated energy",
            suggested_display_precision=2,
        ),
    ),
    (
        sum,
        SensorEntityDescription(  # ""Total energy consumed through the inverters."""
            device_class=SensorDeviceClass.ENERGY,
            state_class=SensorStateClass.TOTAL_INCREASING,
            native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
            key="acc_load",
            name="Total energy consumed",
            suggested_display_precision=2,
        ),
    ),
    (
        max,
        SensorEntityDescription(  # ""Total energy imported from the grid."""
            device_class=SensorDeviceClass.ENERGY,
            state_class=SensorStateClass.TOTAL_INCREASING,
            native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
            key="acc_grid_import",
            name="Total energy imported from the grid",
            suggested_display_precision=2,
        ),
    ),
    (
        max,
        SensorEntityDescription(  # ""Total energy exported to the grid."""
            device_class=SensorDeviceClass.ENERGY,
            state_class=SensorStateClass.TOTAL_INCREASING,
            native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
            key="acc_grid_export",
            name="Total energy exported to the grid",
            suggested_display_precision=2,
        ),
    ),
    (
        sum,
        SensorEntityDescription(  # ""Total energy injected into the batteries."""
            device_class=SensorDeviceClass.ENERGY,
            state_class=SensorStateClass.TOTAL_INCREASING,
            native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
            key="acc_battery_charge",
            name="Accumulated energy charged into the batteries",
            suggested_display_precision=2,
        ),
    ),
    (
        sum,
        SensorEntityDescription(  # ""Total energy provided by the batteries."""
            device_class=SensorDeviceClass.ENERGY,
            state_class=SensorStateClass.TOTAL_INCREASING,
            native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
            key="acc_battery_discharge",
            name="Accumulated energy discharged from the batteries",
            suggested_display_precision=2,
        ),
    ),
]


async def async_setup_entry(
    hass: HomeAssistant,
    entry: ConfigEntry,
    async_add_entities: AddEntitiesCallback,  # noqa: F821
) -> None:
    """Set up sensor devices."""
    coordinator: PlantUpdateCoordinator = entry.runtime_data

    async_add_entities(
        [
            SunSynkApiSensor(agg_func, coordinator, description)
            for agg_func, description in SENSOR_DESCRIPTIONS
        ]
    )
